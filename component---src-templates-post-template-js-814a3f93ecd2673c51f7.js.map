{"version":3,"sources":["webpack:///./src/templates/postTemplate.js"],"names":["useStyles","makeStyles","blogPostContainer","margin","mapDispatchToProps","onSidebarContentSelected","onSetSidebarContentEntry","onSetAnchorHide","onSetSidebarHide","connect","state","selectedKey","getSidebarSelectedKey","sidebarEntry","getSidebarEntry","data","markdownRemark","frontmatter","html","id","classes","hideAnchor","hideSidebar","sidebar","onPostPage","className","blogPost","variant","align","date","showTitle","title","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"qHAAA,8LAkBMA,EAAYC,YAAW,CAC3BC,kBAAmB,CACjBC,OAAQ,WAuDZ,IAOMC,EAAqB,CACzBC,6BACAC,6BACAC,oBACAC,sBAGaC,uBAdS,SAAAC,GACtB,MAAO,CACLC,YAAaC,YAAsBF,GACnCG,aAAcC,YAAgBJ,MAWMN,EAAzBK,EAjEf,YAQI,IAPFM,EAOC,EAPDA,KACAV,EAMC,EANDA,yBACAM,EAKC,EALDA,YACAL,EAIC,EAJDA,yBACAO,EAGC,EAHDA,aACAN,EAEC,EAFDA,gBACAC,EACC,EADDA,iBAEQQ,EAAmBD,EAAnBC,eACAC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,KAAMC,EAAOH,EAAPG,GAErBC,EAAUpB,IAEVqB,EACuB,OAA3BJ,EAAYI,YAA8BJ,EAAYI,WAClDC,EAAsC,OAAxBL,EAAYM,QAShC,OAPAhB,EAAgBc,GAChBb,EAAiBc,GAEbX,IAAgBQ,GAAId,EAAyBc,GAC7CN,IAAiBI,EAAYM,SAC/BjB,EAAyBW,EAAYM,SAGrC,kBAAC,IAAD,CAAQC,YAAY,GAClB,yBAAKC,UAAWL,EAAQlB,mBACtB,yBAAKuB,UAAWL,EAAQM,UACtB,kBAAC,IAAD,CAAYC,QAAQ,YAAYC,MAAM,UACnCX,EAAYY,MAEf,6BACCZ,EAAYa,WACX,kBAAC,IAAD,CAAYH,QAAQ,KAAKC,MAAM,UAC5BX,EAAYc,OAGjB,6BACA,kBAAC,IAAD,CAASd,YAAaA,IACtB,kBAAC,IAAD,CAAYe,wBAAyB,CAAEC,OAAQf,WA2BlD,IAAMgB,EAAS,c","file":"component---src-templates-post-template-js-814a3f93ecd2673c51f7.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport TagList from '../components/TagList'\nimport Layout from '../components/Layout'\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\nimport 'katex/dist/katex.min.css'\nimport '../styles/blog.css'\nimport '../styles/codehighlight.css'\nimport {\n  onSidebarContentSelected,\n  onSetSidebarContentEntry,\n  onSetAnchorHide,\n  onSetSidebarHide,\n} from '../actions/layout'\nimport { getSidebarSelectedKey, getSidebarEntry } from '../store/selectors'\n\nconst useStyles = makeStyles({\n  blogPostContainer: {\n    margin: '0 15%',\n  },\n})\n\nfunction Template({\n  data, // this prop will be injected by the GraphQL query below.\n  onSidebarContentSelected,\n  selectedKey,\n  onSetSidebarContentEntry,\n  sidebarEntry,\n  onSetAnchorHide,\n  onSetSidebarHide,\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html, id } = markdownRemark\n\n  const classes = useStyles()\n\n  const hideAnchor =\n    frontmatter.hideAnchor === null ? false : frontmatter.hideAnchor\n  const hideSidebar = frontmatter.sidebar === null ? true : false\n\n  onSetAnchorHide(hideAnchor)\n  onSetSidebarHide(hideSidebar)\n\n  if (selectedKey !== id) onSidebarContentSelected(id)\n  if (sidebarEntry !== frontmatter.sidebar)\n    onSetSidebarContentEntry(frontmatter.sidebar)\n\n  return (\n    <Layout onPostPage={true}>\n      <div className={classes.blogPostContainer}>\n        <div className={classes.blogPost}>\n          <Typography variant=\"subtitle1\" align=\"center\">\n            {frontmatter.date}\n          </Typography>\n          <br />\n          {frontmatter.showTitle && (\n            <Typography variant=\"h4\" align=\"center\">\n              {frontmatter.title}\n            </Typography>\n          )}\n          <br />\n          <TagList frontmatter={frontmatter} />\n          <Typography dangerouslySetInnerHTML={{ __html: html }}></Typography>\n          {/* <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          /> */}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedKey: getSidebarSelectedKey(state),\n    sidebarEntry: getSidebarEntry(state),\n  }\n}\n\nconst mapDispatchToProps = {\n  onSidebarContentSelected,\n  onSetSidebarContentEntry,\n  onSetAnchorHide,\n  onSetSidebarHide,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Template)\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(fields: { slug: { eq: $path } }) {\n      fields {\n        slug\n      }\n      id\n      html\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        title\n        sidebar\n        showTitle\n        hideAnchor\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}