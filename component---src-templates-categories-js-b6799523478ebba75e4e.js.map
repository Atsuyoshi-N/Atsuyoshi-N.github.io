{"version":3,"sources":["webpack:///./src/templates/categories.js","webpack:///./src/components/PostCard/PostCard.js","webpack:///./src/components/PostCard/index.js"],"names":["Categories","pageContext","data","category","allMarkdownRemark","edges","totalCount","categoryHeader","variant","align","color","map","node","slug","fields","key","post","to","style","cursor","pageQuery","useStyles","makeStyles","root","margin","date","marginTop","cardContent","postTitleLink","textDecoration","borderBottom","readMore","PostCard","classes","console","log","className","Card","CardContent","frontmatter","Typography","display","title","TagList","dangerouslySetInnerHTML","__html","excerpt"],"mappings":"4FAAA,0HAyEeA,UAhEI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACzBC,EAAaF,EAAbE,SADoC,EAEdD,EAAKE,kBAA3BC,EAFoC,EAEpCA,MAAOC,EAF6B,EAE7BA,WACTC,EAAoBD,EAAN,SACH,IAAfA,EAAmB,GAAK,KADN,sBAEEH,EAFF,IAIpB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAYK,QAAQ,KAAKC,MAAM,SAASC,MAAM,iBAC3CH,GAEFF,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACR,OAAO,kBAAC,IAAD,CAAUE,IAAKF,EAAMG,KAAMJ,OAMpC,kBAAC,OAAD,CAAMK,GAAG,eACP,kBAAC,IAAD,CACET,QAAQ,KACRC,MAAM,SACNC,MAAM,UACNQ,MAAO,CACLR,MAAO,iBACP,UAAW,CACTS,OAAQ,aAPd,2BA4CH,IAAMC,EAAS,c,mIClEhBC,G,UAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,cAEVC,KAAM,CACJC,UAAW,QAEbC,YAAa,CACXH,OAAQ,SAEVI,cAAe,CACbC,eAAgB,OAChB,UAAW,CACTnB,MAAO,iBACPoB,aAAc,6BAGlBC,SAAU,CACRL,UAAW,WCzBAM,ID6BA,YAA6B,IAAThB,EAAQ,EAARA,KAC3BiB,EAAUZ,IAEhB,OADAa,QAAQC,IAAInB,EAAKF,OAAOD,MAEtB,yBAAKuB,UAAWH,EAAQV,MACtB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaF,UAAWH,EAAQN,aAC9B,0BAAMS,UAAWH,EAAQR,MAAOT,EAAKuB,YAAYd,MACjD,6BACA,6BACA,kBAAC,OAAD,CAAMR,GAAID,EAAKF,OAAOD,MACpB,kBAAC2B,EAAA,EAAD,CACEhC,QAAQ,KACRiC,QAAQ,SACR/B,MAAM,gBACN0B,UAAWH,EAAQL,eAElBZ,EAAKuB,YAAYG,QAGtB,6BACA,6BACA,kBAACC,EAAA,EAAD,CAASJ,YAAavB,EAAKuB,cAC3B,kBAACC,EAAA,EAAD,KACE,yBACEJ,UAAU,oBACVQ,wBAAyB,CAAEC,OAAQ7B,EAAK8B,YAG5C,kBAACN,EAAA,EAAD,CACE/B,MAAM,QACND,QAAQ,YACR4B,UAAWH,EAAQF,UAEnB,kBAAC,OAAD,CAAMd,GAAE,GAAKD,EAAKF,OAAOD,MAAzB","file":"component---src-templates-categories-js-b6799523478ebba75e4e.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport PostCard from '../components/PostCard'\nimport Layout from '../components/Layout'\nimport { Typography } from '@material-ui/core'\n\n// Components\nimport { Link, graphql } from 'gatsby'\n\nconst Categories = ({ pageContext, data }) => {\n  const { category } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const categoryHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } categorized with \"${category}\"`\n\n  return (\n    <Layout>\n      <div>\n        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\n          {categoryHeader}\n        </Typography>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          return <PostCard key={slug} post={node} />\n        })}\n        {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n        <Link to=\"/categories\">\n          <Typography\n            variant=\"h4\"\n            align=\"center\"\n            color=\"primary\"\n            style={{\n              color: 'cornflowerblue',\n              '&:hover': {\n                cursor: 'pointer',\n              },\n            }}\n          >\n            View All Categories\n          </Typography>\n        </Link>\n      </div>\n    </Layout>\n  )\n}\n\nCategories.propTypes = {\n  pageContext: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Categories\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(format: HTML, pruneLength: 100, truncate: true)\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            category\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport TagList from '../TagList'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { Typography } from '@material-ui/core'\nimport 'katex/dist/katex.min.css'\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '0 10% 30px',\n  },\n  date: {\n    marginTop: '10px',\n  },\n  cardContent: {\n    margin: '0 7px',\n  },\n  postTitleLink: {\n    textDecoration: 'none',\n    '&:hover': {\n      color: 'cornflowerblue',\n      borderBottom: '1px solid cornflowerblue',\n    },\n  },\n  readMore: {\n    marginTop: '15px',\n  },\n})\n\nexport default function PostCard({ post }) {\n  const classes = useStyles()\n  console.log(post.fields.slug)\n  return (\n    <div className={classes.root}>\n      <Card>\n        <CardContent className={classes.cardContent}>\n          <span className={classes.date}>{post.frontmatter.date}</span>\n          <br />\n          <br />\n          <Link to={post.fields.slug}>\n            <Typography\n              variant=\"h4\"\n              display=\"inline\"\n              color=\"textSecondary\"\n              className={classes.postTitleLink}\n            >\n              {post.frontmatter.title}\n            </Typography>\n          </Link>\n          <br />\n          <br />\n          <TagList frontmatter={post.frontmatter} />\n          <Typography>\n            <div\n              className=\"blog-post-content\"\n              dangerouslySetInnerHTML={{ __html: post.excerpt }}\n            ></div>\n          </Typography>\n          <Typography\n            align=\"right\"\n            variant=\"subtitle2\"\n            className={classes.readMore}\n          >\n            <Link to={`${post.fields.slug}`}>続きを読む...</Link>\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","import PostCard from './PostCard'\n\nexport default PostCard"],"sourceRoot":""}